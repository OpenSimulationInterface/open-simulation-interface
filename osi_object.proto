syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";

package osi;

//
// \brief A vehicle (host or other).
//
// This is basically a BaseObject with additional attributes, such as type and
// lights.  The origin of the rear (front) axis coordinate system in world
// coordinates is calculated as:  base.position + R * bbcenter_to_rear (front)
// for the host vehicle (R rotates from vehicle to world frame, i.e. inverse
// orientation of base.orientation).
// 
// For all vehicles, including host vehicles, the position given in
// base.position points to the center of the vehicle's bounding box.
//
// The vehicle object coordinates are defined as x-axis is the direction from 
// rear to front of the vehicle, y-axis corresponds to rear axle and z-axis 
// points to vehicle ceiling [1]. The coordinate system is right-handed.
// Therefore the positive y-axis points to the left of the vehicle. 
//
// \par References: 
// [1] DIN ISO 8855:2013-11
//
message Vehicle
{
    // The ID of the vehicle.
    //
    optional Identifier id = 1;

    // The base parameters of the vehicle (as a characteristic moving object).
    //
    optional BaseMoving base = 2;

    // The type of the vehicle.
    //
    optional Type type = 3;

    // The light state of the vehicle.
    //
    optional LightState light_state = 4;

    // Flag defining whether the vehicle is a simulated host vehicle: True for
    // host vehicle(s), false for other vehicles.  See the description above!
    optional bool host_vehicle = 5;

    // The vector pointing from the bounding box center point (base.position) to
    // the middle (in x, y and z) of the rear axle under neutral load 
    // conditions. In object coordinates.
    optional Vector3d bbcenter_to_rear = 6;

    // The IDs of the lanes that this vehicle is assigned to.
    //
    // \note Might be multiple if the vehicle is switching lanes or moving from 
    // one lane into another following lane.
    repeated Identifier assigned_lane = 7;

    // Flag defining whether the vehicle has an attached trailer.
    //
    optional bool has_trailer = 8;

    // Id of the attached trailer.
    //
    // \note Field need not be set if has_Trailer is set to false or use value
    // for non valid id.
    optional Identifier trailer_id = 9;

    // The ID of the driver of the (host) vehicle.
    //
    // \note Field need not be set if host_vehicle is set to false or use value
    // for non valid id.
    optional Identifier driver = 10;
    
    // The vector pointing from the bounding box center point (base.position) to
    // the middle (in x, y and z) of the front axle under neutral load 
    // conditions. In object coordinates.
    optional Vector3d bbcenter_to_front = 11;
    
    // Static minimal distance in [m] of underbody plane to ground
    // surface plane (i.e. disregarding driving dynamic effects or road
    // surface effects) under neutral load conditions. Can be useful to
    // approximate the clear area under a vehicle that a sensor can see
    // through.
    optional double ground_clearance = 12;

    // Definition of vehicle types.
    //
    enum Type
    {
        // Type of vehicle is unknown (must not be used in ground truth).
        //
        TYPE_UNKNOWN = 0;
        
        // Other (unspecified but known) type of vehicle.
        //
        TYPE_OTHER = 1;
        
        // Vehicle is a normal car.
        //
        TYPE_CAR = 2;
        
        // Vehicle is a truck, bus, or large van.
        //
        TYPE_TRUCK = 3;
        
        // Vehicle is a motorbike or moped.
        //
        TYPE_MOTORBIKE = 4;
        
        // Vehicle is a bicycle (without motor and specific lights).
        //
        TYPE_BICYCLE = 5;
        
        // Vehicle is a trailer (possibly attached to another vehicle).
        //
        TYPE_TRAILER = 6;
    }

    //
    // \brief The state of the lights of a vehicle.
    //
    message LightState
    {
        // State of the object's indicators.
        //
        optional IndicatorState indicator_state = 1;

        // State of the front fog light.
        //
        optional GenericLightState front_fog_light = 2;

        // State of the rear fog light.
        //
        optional GenericLightState rear_fog_light = 3;

        // State of the head lights.
        //
        optional GenericLightState head_light = 4;

        // State of the high beam.
        //
        optional GenericLightState high_beam = 5;

        // State of the reversing light.
        //
        optional GenericLightState reversing_light = 6;

        // State of the brake lights.
        //
        optional BrakeLightState brake_light_state = 7;

        // State of the (rear) license plate illumination
        //
        optional GenericLightState license_plate_illumination_rear = 8;

        // Definition of indicator states.
        //
        enum IndicatorState
        {
            // Indicator state is unknown (must not be used in ground truth).
            //
            INDICATOR_STATE_UNKNOWN = 0;
        
            // Other (unspecified but known) state of indicator.
            //
            INDICATOR_STATE_OTHER = 1;
        
            // Indicators are off.
            //
            INDICATOR_STATE_OFF = 2;
            
            // Left indicator is on.
            //
            INDICATOR_STATE_LEFT = 3;
            
            // Right indicator is on.
            //
            INDICATOR_STATE_RIGHT = 4;
            
            // Hazard/warning light, i.e. both indicators, are on.
            //
            INDICATOR_STATE_WARNING = 5;
        }

        // Definition of generic light states for light that may be on or off.
        //
        enum GenericLightState
        {
            // Light state is unknown (must not be used in ground truth).
            //
            GENERIC_LIGHT_STATE_UNKNOWN = 0;
            
            // Other (unspecified but known) state of light.
            //
            GENERIC_LIGHT_STATE_OTHER = 1;
            
            // Light is off.
            //
             GENERIC_LIGHT_STATE_OFF = 2;
            
            // Light is on.
            //
            GENERIC_LIGHT_STATE_ON = 3;
        }

        // Definition of brake light states.
        //
        enum BrakeLightState
        {
            // Brake light state is unknown (must not be used in ground truth).
            //
            BRAKE_LIGHT_STATE_UNKNOWN = 0;
             
            // Other (unspecified but known) state of brake light.
            //
            BRAKE_LIGHT_STATE_OTHER = 1;
             
            // Brake lights are off.
            //
            BRAKE_LIGHT_STATE_OFF = 2;
            
            // Brake lights are on with normal intensity.
            //
            BRAKE_LIGHT_STATE_NORMAL = 3;
            
            // Brake lights are on with extra bright intensity (indicating
            // stronger braking).
            BRAKE_LIGHT_STATE_STRONG = 4;
        }
    }
}

//
// \brief A simulated object that is neither a moving object (vehicle) nor a
// stationary object (traffic sign, traffic light, StationaryObject).
//
// MovingObject excludes vehicles
//
message MovingObject
{
    // The ID of the object.
    //
    optional Identifier id = 1;

    // The base parameters of the vehicle.
    //
    optional BaseMoving base = 2;

    // The type of the object.
    //
    optional Type type = 3;

    // Definition of object types.
    //
    enum Type {
        // Type of the object is unknown (must not be used in ground truth).
        //
        TYPE_UNKNOWN = 0;
        
        // Other (unspecified but known) type of moving object.
        //
        TYPE_OTHER = 1;
        
        // Object is a pedestrian.
        //
        TYPE_PEDESTRIAN = 2;
        
        // Object is an animal.
        //
        TYPE_ANIMAL = 3;
    }
}

//
// \brief A simulated object that is neither a moving object (vehicle or 
// \c OSI::MovingObject e.g. pedestrian or animal) nor a stationary object 
// (traffic sign, traffic light).
//
// StationaryObject excludes traffic lights and traffic signs
//
message StationaryObject
{
    // The ID of the object.
    //
    optional Identifier id = 1;

    // The base parameters of the vehicle.
    //
    optional BaseStationary base = 2;

    // The type of the object.
    //
    optional Type type = 3;

    // Definition of object types.
    //
    enum Type
    {
        // Type of the object is unknown (must not be used in ground truth).
        //
        TYPE_UNKNOWN = 0;
        
        // Other (unspecified but known) type of object.
        //
        TYPE_OTHER = 1;
        
        // Object is a bridge.
        //
        TYPE_BRIDGE = 2;
        
        // Object is a building.
        //
        TYPE_BUILDING = 3;
        
        // Object is a pylon.
        //
        TYPE_PYLON = 4;
        
        // Object is a reflector post.
        //
        TYPE_REFLECTOR_POST = 5;
        
        // Object is a delineator (e.g. at a construction site).
        //
        TYPE_DELINEATOR = 6;
    }
}
