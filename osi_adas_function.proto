syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";

package osi3;

//
// \brief An Interface to describe the communication of an ADAS-function.
// This proto is in far parts complementary to the osi_driver_inputs.proto.
// The inputs are divided into states and requests.
//
message AdasFunction
{
    //
    // States the ADAS-function can set.
    //
    optional FunctionStates function_states = 1;

    //
    // Requests of the ADAS-function.
    //
    optional FunctionRequests function_requests = 2;

    //
    // \brief An Interface to describe the communication of an ADAS-function.
    // The first set of signals are states the function sets internally
    // and are relevant for the vehicle state.
    //
    message FunctionStates
    {
        // States of an ADAS-Function (SAE Level 3).
        //
        optional HadPilot hadpilot = 1;

        // States of the longitudinal control.
        //
        optional LongitudinalControl longitudinal_control = 2;

        // States of the lateral control.
        //
        optional LateralControl lateral_control = 3;

        // States of function Emergency-Brake-Assistant.
        //
        optional EmergencyBrakeAssistant emergency_brake_assistant = 4;

        // Request that the driver has to take over.
        // 0=Off; 1=On
        //
        optional bool driver_take_over_request = 5;

        // Color of the steering wheel (e.g. to show the driving mode).
        // See osi_common_extension.
        // 
        optional ColorformatRGB steering_wheel_lighting_color = 6;

        // Requested state of the blindspot-lights (often in the side mirrors).
        //
        optional BlindSpotWarning blind_spot_warning = 7;

        // Defined states of the possible blind spot warnings.
        //
        enum BlindSpotWarning
        {
            // No warning.
            //
            BLIND_SPOT_WARNING_NONE = 0;

            // Left warning.
            //
            BLIND_SPOT_WARNING_LEFT = 1;

            // Right warning.
            //
            BLIND_SPOT_WARNING_RIGHT = 2;

            // Warning on both sides.
            //
            BLIND_SPOT_WARNING_BOTH = 3;
        }
    }

    //
    // \brief An Interface to describe the communication of an ADAS-function.
    // This proto is in far parts complementary to the osi_driver_inputs.proto.
    // The inputs are divided into states and requests.
    //
    // The first set of signals are states the function sets internally
    // and are relevant for the vehicle state.
    //
    message FunctionRequests
    {
        // All information about the trajectory the vehicle should follow.
        // See osi_common_extension.
        //
        optional Trajectory trajectory = 1;

        // Angle, angle-speed and torque.
        // See osi_common_extension.
        //
        optional SteeringWheel steering_wheel = 2;

        // Factor to scale the steeringtorque of the function output.
        // 0 = no force of the function, 0.5 = half the force, 1 = 100% Torque
        //
        // Range: [0, 1] 
        //
        optional double steering_override_factor = 3;

        // Acceleration-, brakepedal and clutch.
        // See osi_common_extension.
        //
        optional Pedalry pedalry = 4;

        // Position of the handbrake.
        // A value of 0% means fully released and 100% means fully pressed
        //
        // Unit: [%]
        //
        optional double handbrake_position = 5;

        // This is a description of the possible indicator states.
        //
        optional Indicators indicators = 6;

        // Description of the possible indicator states.
        //
        enum Indicators
        {
            // No indicator.
            //
            INDICATORS_NONE = 0;

            // Left-indicator.
            //
            INDICATORS_LEFT = 1;

            // Right-indicator.
            //
            INDICATORS_RIGHT = 2;

            // Warning lights.
            //
            INDICATORS_ALL = 3;
        }
    }
}

//
// \brief A description for highly automated driving (SAE Level 3).
//
//
message HadPilot
{
    // Activation state of the function.
    //
    optional bool is_activated = 1;

    // This is the speed the function targets.
    // E.g.: At the point of activation, the actual speed could be 80 km/h, 
    // but the function tries to accelerate to 130 km/h.
    //
    // Unit: [km/h]
    //
    optional double targeted_speed = 2;
}

//
// \brief A description for the function longitudinal control.
//
//
message LongitudinalControl
{
    // Activation state of the function.
    //
    optional bool is_activated = 1;

    // This is the speed the function targets.
    // E.g.: At the point of activation, the actual speed could be 80 km/h, 
    // but the function tries to accelerate to 130 km/h.
    //
    // Unit: [km/h]
    //
    optional double targeted_speed = 2;

    // The timegap describes the minimumdistance to the next vehicle in front.
    //
    // Unit: [s]
    //
    optional double timegap = 3;
}

//
// \brief A description for the function lateral control.
//
//
message LateralControl
{
    // Activation state of the function.
    //
    optional bool is_activated = 1;
}

//
// \brief A description for the function emergency brake assistant.
//
//
message EmergencyBrakeAssistant
{
    // Activation state of the function.
    //
    optional bool is_activated = 1;
}
