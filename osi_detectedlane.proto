syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";
import "osi_lane.proto";
import "osi_detectedobject.proto";

package osi;

//
// \brief A lane segment as detected by the sensor.
//
message DetectedLane
{
    // Header attributes of detected lane.
    //
    optional DetectedObjectHeader header = 1;

    // Specific ID of the detected lane as assigned by the sensor internally. Need not match with ground_truth_id.
    //
    optional Identifier tracking_id = 2;

    // The ID of the original lane in the ground truth.
    // Multiple entries if the detected lane is a merge of multiple lanes in ground truth (as lane segment definitions
    // may vary between sensor and ground truth).
    repeated Identifier ground_truth_id = 3;

    // The detected lane.
    //
    optional Lane lane = 4;

    // The estimated probability that this lane really exists, not based on history.
    //
    // \note Use as confidence measure where a low value means less confidence and a high value indicates
    // strong confidence.
    optional double existence_probability = 5;
}

//
// \brief A lane segment as detected by the sensor.
//
message DetectedLaneBoundary
{
    // Header attributes of detected lane boundary.
    //
    optional DetectedObjectHeader header = 1;

    // Specific ID of the detected lane boundary as assigned by the sensor internally. Need not match with ground_truth_id.
    //
    optional Identifier tracking_id = 2;

    // The ID of the original laneboundary in the ground truth.
    // In case of a ghost laneboundary (no corresponding ground truth), this field should be unset.
    optional Identifier ground_truth_id = 3;

    // The basic meassured lane boundary.
    //
    optional LaneBoundary lane_boundary = 4;

    // State of the measurement. Lane boundary measured in the current image or Lane boundary predicted (no measurement in current image).
    //
    optional MeasurementState measurement_state = 5;

    // Probability of the detection that the lane exists.
    //
    optional double existence_probability = 6;

    // Confidence of the classified lane boundary type.
    //
    optional double type_confidence = 7;

    // Confidence of the classified lane marker color.
    //
    optional double color_confidence = 8;

    // The root mean squared error of the BoundaryPoint information from a LaneBoundary.
    // For every \c lane_boundary.boundary_line point exact one \c boundary_line_rmse rmse information exist.
    repeated BoundaryPoint boundary_line_rmse = 9;

    // Confidence of the segments of the BoundaryPoint information from a LaneBoundary.
    // For every \c lane_boundary.boundary_line point exact one \c boundary_line_confidence confidence value is specified.
    repeated double boundary_line_confidence = 10;
}
