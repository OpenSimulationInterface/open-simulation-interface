syntax = "proto2";

option optimize_for = SPEED;

import "osi_version.proto";
import "osi_common.proto";

package osi3;

// \brief Host vehicle data is about the perception of the vehicle about it's own, internal states.
// It describes data that the host vehicle knows about itself,
// e.g. from location sensors, internal sensors, board net etc.
// A dynamic model can serve as input provider.
// Sensors, mockups or other modules can make usage of the host vehicle data.
// It consists of different messages categorizing the vehicle in:
// Vehicle-Basics, Vehicle-Powermanagement, Vehicle-Powertrain, Vehicle-SteeringWheel, Vehicle-Wheels, Vehicle-Localization.
//
// \image html OSI_HostVehicle.svg
//
// All coordinates and orientations are relative to the global ground truth coordinate system.
// Otherwise it is mentioned explicitly.
//
message HostVehicleData
{
    // The interface version used by the sender.
    //
    optional InterfaceVersion version = 10;

    // The timestamp of the host vehicle data. Zero time is arbitrary but must be
    // identical for all messages. Zero time does not need to coincide with
    // the unix epoch. Recommended is the starting time point of the
    // simulation or measurement.
    //
    // \note This is the point in time that the host vehicle data message becomes
    // available on the board net system.
    //
    optional Timestamp timestamp = 11;

    // Deprecated: Will be removed in next major release. Moved to VehiclePositionAndKinematics.
    // Current estimated location based on GPS- and related navigation sensors.
    //
    // \note Note that dimension and base_polygon need not be set.
    //
    optional BaseMoving location = 1;

    // Deprecated: Will be removed in next major release. Moved to VehiclePositionAndKinematics.
    // Current estimated location error based on GPS- and related navigation
    // sensors.
    //
    // \note Note that dimension and base_polygon need not be set.
    //
    optional BaseMoving location_rmse = 2;

    // The ID of the object. Can be discussed.
    //
    // \rules
    // is_globally_unique
    // \endrules
    //
    optional Identifier id = 3;

    // The basic parameters of the vehicle.
    //
    optional VehicleBasics vehicle_basics = 4;

    // Interface regarding the powermanagement.
    //
    optional VehiclePowermanagement vehicle_powermanagement = 5;

    // Interface regarding the powertrain.
    //
    optional VehiclePowertrain vehicle_powertrain = 6;

    // Interface regarding the steering wheel.
    //
    optional VehicleSteeringWheel vehicle_steering_wheel = 7;

    // Interface regarding the wheels.
    //
    optional VehicleWheels vehicle_wheels = 8;

    // Interface regarding the navigation.
    //
    optional VehiclePositionAndKinematics vehicle_position_and_kinematics = 9;

    //
    // \brief The absolute base parameters of the vehicle.
    //
    message VehicleBasics
    {
        // The total mass of the vehicle (curb weight).
        //
        // Unit: kg
        //
        // \par Reference:
        // Paragraph 42 of the German Road Traffic Admission Regulations (StVZO).
        //
        optional double curb_weight = 1;
    }

    //
    // \brief State description of the powertrain.
    //
    message VehiclePowermanagement
    {
        // To be discussed.
        //
    }

    //
    // \brief State description of the powertrain.
    //
    message VehiclePowertrain
    {
        // The positions of the pedals.
        //
        optional Pedalry pedalry = 1;

        // The actual gear of the gear lever.
        // May come up later. For now just to be mentioned.
        //
        // optional GearLeverState gear_lever_state = 2;

        // The actual gear of the transmission.
        // E.g. gear_lever can be in "D" and transmission in "4", but not the
        // other way around.
        //
        // The sign of this field is linked to the gear's mode as following:
        // - zero: neutral position
        // - positive: driving forward mode
        // - negative: reverse mode (generally -1, but few vehicles have several
        //   reverse mode gears)
        //
        optional int32 gear_transmission = 3;

        // Information about the motor(s).
        //
        repeated Motor motor = 4;

        //
        // \brief A description for the positions of the pedals.
        //
        message Pedalry
        {
            // Position of the acceleration-pedal.
            // Range: 0-1 (Unpressed - fully pressed)
            //
            optional double pedal_position_acceleration = 1;

            // Position of the brake-pedal.
            // Range: 0-1 (Unpressed - fully pressed)
            //
            optional double pedal_position_brake = 2;

            // Position of the clutch-pedal.
            // Range: 0-1 (Unpressed - fully pressed)
            //
            optional double pedal_position_clutch = 3;
        }

        //
        // \brief A description for the positions of the pedals.
        //
        message Motor
        {
            // The type of the motor.
            //
            optional Type type = 1;

            // Rounds per minute of the engine. RPM can be from E-Motor/ Engine.
            //
            // Unit: 1/min
            //
            optional double rpm = 2;

            // Torque in Nm. It can either be from Engine/E-Motor or combined Torque values.
            //
            // Unit: N*m
            //
            optional double torque = 3;

            // Definition which type of motor is used.
            //
            enum Type
            {
                // The powertrain mode is unknown.
                //
                TYPE_UNKNOWN = 0;

                // It is another powertrain mode.
                //
                TYPE_OTHER = 1;

                // A motor working after the principle of Nicolaus Otto.
                //
                TYPE_OTTO = 2;

                // A motor working after the principle of Rudolf Diesel.
                //
                TYPE_DIESEL = 3;

                // A motor working electric.
                //
                TYPE_ELECTRIC = 4;
            }
        }
    }

    //
    // \brief Interface to the vehicle-model.
    // The focus here is on the steering wheel.
    //
    message VehicleSteeringWheel
    {
        // Angle of the steering wheel.
        // 0=Central (Straight); Left>0; 0>Right.
        //
        // Unit: rad
        //
        optional double angle = 1;

        // Angle-speed of the steering wheel.
        // 0=Central (Straight); Left>0; 0>Right.
        //
        // Unit: rad/s
        //
        optional double angular_speed = 2;

        // Torque of the steering wheel to the hand.
        // 0=Central (Straight); Left>0; 0>Right.
        //
        // Unit: N*m
        //
        optional double torque = 3;
    }

    //
    // \brief The focus here is on the description of the wheels.
    //
    message VehicleWheels
    {
        // Contains the description of a wheel.
        //
        repeated Wheel wheel = 1;

        //
        // \brief The focus here is on the description of a wheel.
        //
        message Wheel
        {
            // The axle which contains this wheel.  A value of 0 represents the
            // front-most axle of the vehicle with higher numbers incrementing
            // towards the rear-most axle.
            //
            optional uint32 axle = 1;

            // The index of the wheel on the axle, counting in the direction
            // of positive-y, i.e. right-to-left.
            //
            // For example, on a standard 2-axle, 4-wheel car, the rear-right
            // wheel would be (axle=1, index=0).
            //
            optional uint32 index = 2;

            // Dry friction is a force that opposes the relative lateral motion of two solid surfaces
            // in contact. It is subdivided into static friction between non-moving surfaces and kinetic
            // friction between moving surfaces.
            // Ued here is the dry friction coefficient of the paired materials (see reference).
            // Dimensionless.
            //
            // Unit: -
            //
            // \par References:
            // - http://adaptivemap.ma.psu.edu/websites/6_friction/dry_friction/dryfriction.html
            //
            //optional double kinetic_friction_coefficient = 3;

            // Contact point of the mid of the tire tread with the world.
            // Absolute coordinates (x, y, z).
            //
            // Unit: m
            //
            //optional Vector3d contact_point = 4;

            // Contains the rotation rate of the wheel per second in radians.
            // Based on the processed output of the hall sensor at the wheel.
            //
            // Unit: rad/s
            //
            optional double rotation_rate = 5;

            // Contains the longitudinal slip of the tire.
            // \par References:
            // - https://www.kfz-tech.de/Biblio/Formelsammlung/Schlupf.htm
            //
            // Unit: %
            //
            optional double slip = 6;
        }
    }

    //
    // \brief This message contains all the information the vehicle knows about its kinematic states.
    //
    message VehiclePositionAndKinematics
    {
        //
        // \brief Current vehicle kinematics in the cartesian coordinate system.
        //
        message CartesianInformation
        {
            // Current kinematic data. If enu_origin is set then the pose is given in ENU according to ISO8855.
            // Otherwise the cartesian coordinate system is only an arbitrary local frame of reference.
            //
            // \note Note that dimension and base_polygon need not be set.
            //
            optional BaseMoving cartesian_data = 1;

            // Current kinematic data error. If enu_origin is set then the pose error is given in ENU according to ISO8855.
            // Otherwise the cartesian coordinate system is only an arbitrary local frame of reference.
            //
            // \note Note that dimension and base_polygon need not be set.
            //
            optional BaseMoving cartesian_data_rmse = 2;

            // Geodetic origin of the ENU (east-north-up) cartesian coordinate system regarding WGS84.
            //
            // Order: Longitude[rad], latitude[rad], altitude[m].
            //
            optional Vector3d enu_origin = 3;
        }

        //
        // \brief Current estimated location based on the output of the GPS-Unit.
        //
        message GeoreferencedInformation
        {
            // Longitude in decimal degrees regarding WGS84.
            //
            // Unit: Degree
            // Range: [-180; 180]
            //
            optional double longitude = 1;

            // Latitude in decimal degrees regarding WGS84.
            //
            // Unit: Degree
            // Range: [-90; 90]
            //
            optional double latitude = 2;

            // Height above sea level regarding EGM96.
            //
            // Unit: m
            // Range: [-300; 10000]
            //
            optional double altitude = 3;

            // To be discussed as it is in CartesianInformation.
            // Heading in decimal degrees.
            //
            // Unit: Degree
            // Range: [0; 360]
            //
            // optional double heading = 4;

            // Accuracy of localization measurement in percentage of the units.
            //
            // Unit: %
            //
            // optional double localization_accuracy = 5;

            // Number of satellites.
            //
            // optional int32 number_of_satellites = 6;
        }
    }
}
