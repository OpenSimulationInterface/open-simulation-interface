// define the proto language version
syntax = "proto2";
// optimize for speed
option optimize_for = SPEED;

// imports
import "osi_common.proto";
import "osi_object.proto";
import "osi_modelinternal.proto";
import "osi_sensorspecific.proto";

// OSI - Open Simulation Interface
package osi;

/**
 * Object in the environment as detected and perceived by the sensor.
 */
message DetectedObject
{
    // Specific id of the object as assigned by the sensor internally. Need not match with ground_truth_id.
    optional Identifier tracking_id = 1;

    // The id of the original object in the ground truth list of vehicles / objects / ..
    // Multiple entries if detected object is a merge of multiple ground truth objects.
    repeated Identifier ground_truth_id = 2;

    // Base parameters of the object. Reference point is the middle of the bounding box of the target object.
    optional BaseMoving object = 3;

    // The standard deviations of the base parameters in object (cross correlations are currently neglected).
    optional BaseMoving standard_deviation = 4;

    // The estimated probabilities for the object to belong to a specific class.
    optional ClassProbability class_probability = 5;

    // The estimated probability that this object really exists. Range [0,1].
    optional double existence_probability = 6;

    // Current state of lights as perceived by sensor, only relevant if the object is estimated to be an object that
    // has lights.
    optional Vehicle.LightState light_state = 7;

    // Reference point of the sensor measurement (required to decouple position and bounding box estimation) as used by
    // the sensor (model).
    // Note that the value of this field has no impact on the value of object.position, which always references the
    // center of the object / bounding box.
    optional ReferencePoint reference_point = 8;

    // Additional internal data and state flags required and used by the sensor-models, should not be used by
    // subscribers to SensorData. Generally this field should be cleared after internal processing.
    optional ModelInternalObject model_internal_object = 9;

    // Additional data that is specific to radar sensors.
    // Field need not be set if simulated sensor is not a radar sensor.
    optional RadarSpecificObjectData radar_specifics = 10;

    // Additional data that is specific to lidar sensors.
    // Field need not be set if simulated sensor is not a lidar sensor.
    optional LidarSpecificObjectData lidar_specifics = 11;

    // Additional data that is specific to camera sensors.
    // Field need not be set if simulated sensor is not a camera sensor.
    optional CameraSpecificObjectData camera_specifics = 12;

    // Definition of available reference points.
    enum ReferencePoint
    {
        // Reference point is unknown, i.e. sensor does not report a reference point for the position coordinate.
        // Value must not be used in ground truth data.
        // Usually this means that the reference point for the given position coordinates is a largely arbitrary point
        // within the bounding volume unknown to the sensor. If this value is set, the center of the bounding box should
        // be used as reference point by convention, unless the specific use case requires otherwise.
        REFERENCE_POINT_UNKNOWN = 0;
        // Other (unspecified but known) reference point.
        REFERENCE_POINT_OTHER = 1;
        // Center of the bounding box.
        REFERENCE_POINT_CENTER = 2;
        // Middle-Left of the bounding box.
        REFERENCE_POINT_MIDDLE_LEFT = 3;
        // Middle-Right of the bounding box.
        REFERENCE_POINT_MIDDLE_RIGHT = 4;
        // Rear-Middle of the bounding box.
        REFERENCE_POINT_REAR_MIDDLE = 5;
        // Rear-Left of the bounding box.
        REFERENCE_POINT_REAR_LEFT = 6;
        // Rear-Right of the bounding box.
        REFERENCE_POINT_REAR_RIGHT = 7;
        // Front-Middle of the bounding box.
        REFERENCE_POINT_FRONT_MIDDLE = 8;
        // Front-Left of the bounding box.
        REFERENCE_POINT_FRONT_LEFT = 9;
        // Front-Right of the bounding box.
        REFERENCE_POINT_FRONT_RIGHT = 10;
    }

    /**
     * Probabilities for the classification of the object as perceived by the sensor.
     */
    // TODO(FSoyka) These probabilities should be linked to the class type definitions in osi_object.proto 
    message ClassProbability
    {
        // Probability that the object has unknown type. Range [0,1].
        optional double prob_unknown = 1;
        // Probability that the object is a car. Range [0,1].
        optional double prob_car = 2;
        // Probability that the object is a truck. Range [0,1].
        optional double prob_truck = 3;
        // Probability that the object is a motorbike. Range [0,1].
        optional double prob_motorbike = 4;
        // Probability that the object is a bicycle. Range [0,1].
        optional double prob_bicycle = 5;
        // Probability that the object is a pedestrian. Range [0,1].
        optional double prob_pedestrian = 6;
        // Probability that the object is a stationary object. Range [0,1].
        optional double prob_stationary = 7;
    }
}
