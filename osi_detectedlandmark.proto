syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";
import "osi_landmark.proto";
import "osi_detectedobject.proto";

package osi;

//
// \brief A traffic sign in the environment as detected by the sensor.
//
message DetectedTrafficSign
{
    // Header attributes of detected traffic sign.
    //
    optional DetectedObjectHeader header = 1;

    // Specific ID of the traffic sign as assigned by the sensor internally. Need not match with ground_truth_id.
    //
    optional Identifier tracking_id = 2;

    // The ID of the original traffic sign in the ground truth.
    // In case of a ghost sign (no corresponding ground truth), this field should be unset.
    optional Identifier ground_truth_id = 3;

    // A list of candidates for this traffic sign as estimated by the sensor.
    //    
    repeated CandidateSign candidate_sign = 4;

    // A list of candidates for (a) possible supplementary sign(s) as estimated by the sensor.
    //    
    repeated CandidateSupplementarySign candidate_supplementary_sign = 5;

    // The detected geometry of the traffic sign.
    //    
    optional Geometry geometry = 6;

    // The estimated probability that this traffic sign really exists, not based on history.
    //
    // \note Use as confidence measure where a low value means less confidence and a high value indicates
    // strong confidence.
    optional double existence_probability = 7;

    // The measurement state.
    //
    optional MeasurementState measurement_state = 8;
    // The root mean squared error of the base parameters of the detected traffic sign.
    //
    optional BaseStationary rmse = 9;

    // Links to the corresponding lanes.
    //    
    repeated RelevantLane relevant_lane = 10;

    // Definition of traffic sign geometries.
    //
    enum Geometry
    {
        // Geometry of the traffic sign is unknown (must not be used in ground truth).
        //    
        GEOMETRY_UNKNOWN = 0;
        
        // Geometry of the traffic sign is unspecified (but known).
        //    
        GEOMETRY_OTHER = 1;
        
        // Traffic sign has a triangular geometry pointing to the top.
        //    
        GEOMETRY_TRIANGLE_TOP = 2;
        
        //Traffic sign has a triangular geometry pointing down.
        //    
        GEOMETRY_TRIANGLE_DOWN = 3;
        
        // Traffic sign has a circular geometry.
        //    
        GEOMETRY_CIRCLE = 4;
        
        // Traffic sign has a square geometry.
        //    
        GEOMETRY_SQUARE = 5;
        
        // Traffic sign has a diamond geometry.
        //    
        GEOMETRY_DIAMOND = 6;
        
        // Traffic sign has an octagon geometry.
        //    
        GEOMETRY_OCTAGON = 7;
        
        // Traffic sign has a geomety of an arrow pointing to the left.
        //    
        GEOMETRY_ARROW_LEFT = 8;
        
        // Traffic sign has a geomety of an arrow pointing to the right.
        //    
        GEOMETRY_ARROW_RIGHT = 9;
        
        // Traffic sign has a rectangle geometry. (width is bigger than height)
        // E.g. one-way
        GEOMETRY_RECTANGLE = 10;
        
        // Traffic sign that has a pole geometry. (height is bigger than width)
        // E.g. pole indicating highways exit in xx m.
        GEOMETRY_POLE = 11;
        
        // Traffic sign that has an oversize rectangle geometry.
        // E.g. direction plates on highway or city signs.
        GEOMETRY_PLATE = 12;
    }
}

//
// \brief A candidate for a detected traffic sign as estimated by the sensor.
//
message CandidateSign
{
    // The definition of the candidate's properties.
    // The sign.id values of all CandidateSigns within one DetectedTrafficSign correspond to the tracking ID and must
    // be identical.
    optional TrafficSign sign = 1;

    // The estimated probability that this candidate is the true value. Range [0,1].
    // The sum of all candidate_probabilities must be one.
    optional double candidate_probability = 2;
}

//
// \brief A candidate for (a) detected supplementary sign(s) as estimated by the sensor.
//
message CandidateSupplementarySign
{
    // The definition of one of more supplementary signs that together define this candidate.
    //
    repeated SupplementarySign sign = 1;

    // The estimated probability that this candidate is the true value. Range [0,1].
    // The sum of all candidate_probabilities must be one.
    optional double candidate_probability = 2;
}

//
// \brief A traffic light in the environment as detected by the sensor.
//
message DetectedTrafficLight
{
    // Header attributes of detected traffic light.
    //
    optional DetectedObjectHeader header = 1;

    // Specific ID of the traffic light as assigned by the sensor internally. Need not match with ground_truth_id.
    //
    optional Identifier tracking_id = 2;

    // The ID of the original traffic light in the ground truth.
    // In case of a ghost detection (no corresponding ground truth), this field should be unset.
    optional Identifier ground_truth_id = 3;

    // Description of the detected traffic light.
    //
    optional TrafficLight traffic_light = 4;

    // Determines for which directions the traffic light applies.
    //
    repeated RelevantDirection relevant_direction = 5;

    // Links to the corresponding lanes.
    //
    repeated RelevantLane relevant_lane = 6;

    // The estimated probability that this traffic light really exists, not based on history.
    //
    // \note Use as confidence measure where a low value means less confidence and a high value indicates
    // strong confidence.
    optional double existence_probability = 7;

    // The measurement state.
    //
    optional MeasurementState measurement_state = 8;
    // The root mean squared error of the base parameters of the detected traffic light.
    //
    optional BaseStationary rmse = 9;

    //
    // \brief Further specifies the relevant directions of the traffic light.
    //
    message RelevantDirection
    {
        // The direction the traffic light corresponds to.
        //
        optional Direction direction = 1;

        // Relevance probability. Range [0,1].
        //
        optional double relevance_probability = 2;

        // Specifies the different directions.
        //
        enum Direction
        {
            // Direction is unknown (must not be used in ground truth).
            //
            DIRECTION_UNKNOWN = 0;
            // Other (unspecified but known) direction.
            //
            DIRECTION_OTHER = 1;
            // Direction is straight.
            //
            DIRECTION_STRAIGHT = 2;
            // Direction is left.
            //
            DIRECTION_LEFT = 3;
            // Direction is right.
            //
            DIRECTION_RIGHT = 4;
        }
    }
}

//
// \brief Further specifies the relevant lane of a detected object.
//
message RelevantLane
{
    // Tracking ID of the lane segment.
    //
    optional Identifier lane_id = 1;

    // Relevance probability. Range [0,1].
    //
    optional double relevance_probability = 2;
}

//
// \brief A road marking in the environment as detected by the sensor.
//
message DetectedRoadMarking
{
    // Header attributes of detected road marking.
    //
    optional DetectedObjectHeader header = 1;

    // Specific ID of the road marking as assigned by the sensor internally. Need not match with ground_truth_id.
    //
    optional Identifier tracking_id = 2;

    // The ID of the original road marking in the ground truth.
    // In case of a ghost detection (no corresponding ground truth), this field should be unset.
    optional Identifier ground_truth_id = 3;

    // A list of candidates for this road marking as estimated by the sensor.
    //
    repeated CandidateRoadMarking candidate_road_marking = 4;

    // The estimated probability that this road marking really exists, not based on history.
    //
    // \note Use as confidence measure where a low value means less confidence and a high value indicates
    // strong confidence.
    optional double existence_probability = 5;

    // Links to the corresponding lanes.
    //
    repeated RelevantLane relevant_lane = 6;

    // The measurement state.
    //
    optional MeasurementState measurement_state = 7;
    // The root mean squared error of the base parameters of the detected road marking.
    //
    optional BaseStationary rmse = 8;
}

//
// \brief A candidate for a detected road marking as estimated by the sensor.
//
message CandidateRoadMarking
{
    // The description of the road marking.
    //
    optional RoadMarking road_marking = 1;

    // The estimated probability that this candidate is the true value. Range [0,1].
    // The sum of all candidate_probabilities must be one.
    optional double candidate_probability = 2;
}
