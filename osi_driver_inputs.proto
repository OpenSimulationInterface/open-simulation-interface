syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";
import "osi_adas_function.proto";

package osi3;

//
// \brief An Interface to describe the inputs from a human driver.
// Contains a base-set of signals with focus on ADAS-functions.
// The inputs are divided into states and requests.
//
message DriverInputs
{
    //
    // The first set of signals are states the driver can (usually) directly
    // set.
    //
    optional DriverInitializedStates driver_initialized_states = 1;

    // 
    // The second set of signals are requests addressed to an external function.
    //
    optional DriverRequests driver_requests = 2;

    //
    // \brief The first set of signals are states the driver can (usually)
    // directly set.
    //
    message DriverInitializedStates
    {
        // State of the driver seat-belt. It is often an initial condition to
        // start an ADAS-Function.
        //
        optional bool is_seat_belt_fastened = 1;

        // State of the doors. It is often an initial condition to start an
        // ADAS-Function.
        //
        optional bool are_doors_closed = 2;

        // Hands Off Detection.
        //
        optional bool are_hands_off = 3;

        // State of the ignition. It is often an initial condition to start an
        // ADAS-Function.
        //
        optional bool is_ignition_on = 4;

        // State of the warning lights.
        //
        optional bool are_warning_lights_on = 5;

        // Angle, angle-speed and torque.
        // See osi_common_extension.
        //
        optional SteeringWheel steering_wheel = 6;

        // Acceleration-, brake pedal and clutch.
        // See osi_common_extension.
        //
        optional Pedalry pedalry = 7;

        // Position of the handbrake.
        // A value of 0% means fully released and 100% means fully pressed
        //
        // Unit: [%]
        //
        optional double handbrake_position = 8;

        // Position of the gear lever.
        // See osi_common_extension.
        //
        optional Gear gear_lever = 9;
    }

    // 
    // \brief The second set of signals are requests addressed to an external
    // function.
    // The ADAS-function can react to a request by setting its own states.
    // The osi_adas_function.proto is widely complementary to this proto.
    // For e.g. the driver wants to activate a function, but the
    // initial-conditions of the
    // ADAS-function are not fullfilled, the request is without an effect to the
    // driving behaviour.
    //
    message DriverRequests
    {
        // Wished states of the driver regarding an ADAS-Function (SAE Level 3).
        //
        optional HadPilot hadpilot = 1;

        // Wished states of the driver regarding the longitudinal control.
        //
        optional LongitudinalControl longitudinal_control = 2;

        // Wished states of the driver regarding the lateral control.
        //
        optional LateralControl lateral_control = 3;

        // Wished states of the driver regarding the function
        // Emergency-Brake-Assistant.
        //
        optional EmergencyBrakeAssistant emergency_brake_assistant = 4;

        // Request to an ADAS-Function for a lane change.
        //
        optional LaneChangeRequest lane_change_request = 5;

        // Request to an ADAS-Function for a lane change.
        //
        enum LaneChangeRequest
        {
            // Stay on the actual lane.
            //
            LANE_CHANGE_REQUEST_EGO_LANE = 0;

            // Change to the left.
            //
            LANE_CHANGE_REQUEST_LC_LEFT = 1;

            // Change to the right.
            //
            LANE_CHANGE_REQUEST_LC_RIGHT = 2;
        }
    }
}
