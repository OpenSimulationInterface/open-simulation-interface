// define the proto language version
syntax = "proto2";
// optimize for speed
option optimize_for = SPEED;

// imports
import "osi_common.proto";

// OSI - Open Simulation Interface
package osi;

/**
 * Interface for low level sensor data, in contrast to high level data after object hypothesis and tracking.
 * All information regarding the environment is given with respect to the sensor coordinate system specified in
 * LowLevelData::mounting_position.
 * When simulating multiple sensors, each sensor has an individual copy of LowLevelData in its own reference frame. This
 * allows an independent treatment of the sensors.
 */
 message LowLevelData
 {
     // The id of the sensor.
     optional Identifier id = 1;

     // The data timestamp of the simulation environment. Start time (zero) is arbitrary, but must remain fixed over the
     // course of a simulation run. Recommended zero time is the starting time of the simulation.
     optional Timestamp timestamp = 2;

     // Mounting position of the sensor (origin and orientation of the sensor coordinate system);
     // given relative to the middle of the rear axis of the host vehicle.
     optional MountingPosition mounting_position = 3;

     // Lidar point cloud.
     optional LidarPointCloud lidar_point_cloud = 4;

     // Radar Reflection list.
     optional RadarReflectionList radar_reflection_list = 5;
}

/**
 * A generic lidar point cloud.
 */
message LidarPointCloud
{
    // List of points constituting the point cloud.
    repeated LidarPoint point = 1;
}

/**
 * A point in a lidar point cloud.
 */
message LidarPoint
{
    // Position of the point.
    optional Vector3d position = 1;

    // Intensity of echo received by sensor associated with the point. Unit: [W].
    optional double intensity = 2;

    // Estimated type of target that caused the reflection.
    optional ReflectionType reflection_type = 3;

    // The id of the (dynamic) object that caused the reflection (only set for corresponding ReflectionType, unset in
    // other cases).
    optional Identifier reflection_object_id = 4;

    // Echo number of the LidarPoint associated with a specific transmitted laser pulse. The echo number is 0 if the
    // LidarPoint results from the closest reflection, 1 for the second closest, etc.
    optional uint32 echo = 5;

    // Duration of the echo pulse (above system noise cut-off threshold). Unit: [ns].
    optional double echo_pulse_duration = 6;

    // Definition of reflection types.
    enum ReflectionType
    {
        // Reflection type is unknown (must not be used in ground truth).
        REFLECTION_TYPE_UNKNOWN = 0;
        // Other (unspecified but known) type of reflection.
        REFLECTION_TYPE_OTHER = 1;
        // Invalid scan point, not to be used for object tracking, of unspecified type (none of the other types applies).
        REFLECTION_TYPE_INVALID = 2;
        // Reflection from dynamic object.
        REFLECTION_TYPE_DYNAMIC_OBJECT = 3;
        // Reflection from static object.
        REFLECTION_TYPE_STATIC_OBJECT = 4;
        // Reflection from ground.
        REFLECTION_TYPE_GROUND = 5;
        // Reflection from road marking.
        REFLECTION_TYPE_ROAD_MARKING = 6;
    }
}

/**
 * A list of radar reflections.
 */
message RadarReflectionList
{
    // List of radar reflections constituting the radar reflection list.
    repeated RadarReflection reflection = 1;
}

message RadarReflection
{
    // The id of the radar reflection.
    optional Identifier id = 1;

    // The position vector of the radar reflection, given in polar coordinates.
    optional Polar3d position = 2;

    // The radar cross section (RCS) of the radar reflection. Unit: [dB sqm].
    optional double rcs = 3;

    // Radial speed of the radar reflection.
    // Not be confused with the velocity vector! This is the absolute value of the radial component of the velocity
    // vector as can be measured directly using the Doppler effect.
    optional double speed = 4;
}
