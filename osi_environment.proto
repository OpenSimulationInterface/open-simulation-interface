syntax = "proto2";

option optimize_for = SPEED;

import "osi_common.proto";

package osi3;

//
// \brief The conditions of the environment.
//
// Definition of light, weather conditions and other environmental conditions.
//
// \note These conditions apply locally around the host vehicle.
//
message EnvironmentalConditions
{
    //
    // \brief Ambient light is any light in the vehicle's environment that is not
    // emitted by the vehicle itself. It can include sun/moon light, light from
    // other cars, street lights etc.
    //
    // \note lx ("lux") is the SI unit of luminance or illumination of an area of exact
    // one square meter, which is equal to one lumen per square meter 1 lx =
    // 1 lm/m^2 [1].
    // lm ("lumen") is the SI derived unit of luminous flux and a measure of
    // the total quantity of visible light emitted by a source. The lumen is
    // defined in relation to cd ("candela") as 1 lm = 1 cd sr, where sr
    // denotes steradian, the unit of solid angle used in 3D geometry analogous
    // to the radian [1].
    //
    // Categorization is done based on natural day/night time illuminance levels
    // [2] and standards for required lighting levels on roads [2, 3, 4, 5].
    //
    // \par References:
    // [1] DIN Deutsches Institut fuer Normung e. V. (1982). <em>DIN 5031-3 Strahlungsphysik im optischen Bereich und Lichttechnik - Groessen, Formelzeichen und Einheiten der Lichttechnik</em>. (DIN 5031-3:1982-03). Berlin, Germany. \n
    // [2] National Optical Astronomy Observatory. (2015, December 02). <em>Recommended Light Levels</em>. Retrieved January 25, 2020, from https://www.noao.edu/education/QLTkit/ACTIVITY_Documents/Safety/LightLevels_outdoor+indoor.pdf \n
    // [3] Wang, Y. & Zou, Y., (2016, March). <em>Study on Illumination for State Highways</em>. Washington State Department of Transportation. Retrieved January 25, 2020, from http://www.wsdot.wa.gov/research/reports/fullreports/847.1.pdf \n
    // [4] Laperriere, A. (2011, May). <em>LED street lighting in the municipality of Saint-Gedeon-de-Beauce within the framework of advanced lighting technologies</em>. Retrieved January 25, 2020, from http://sslnet.ca/wp-content/uploads/2011/10/LTE-RT-2011-0076-Anglais.pdf \n
    // [5] Crabb, G. I., Beaumont, R. & Webster, D. (2008, October 17). <em>Review of the class and quality of street lighting</em>. Transport Research Laboratory. Retrieved January 25, 2020, from http://courtneystrong.com/wp-content/uploads/2017/07/css-sl1-class-and-quality-of-street-lighting.pdf
    //
    optional double ambient_illumination = 1;

    // The time of day at the host vehicles location.
    //
    optional TimeOfDay time_of_day = 2;

    // Atmospheric pressure in Pascal at z=0.0 in world frame (about 101325
    // Pa).
    //
    // Unit: Pa
    //
    // \rules
    // is_greater_than_or_equal_to: 80000
    // is_less_than_or_equal_to: 120000
    // \endrules
    //
    optional double atmospheric_pressure = 3;

    // Temperature in Kelvin at z=0.0 in world frame.
    //
    // Unit: K
    //
    // \rules
    // is_greater_than_or_equal_to: 170
    // is_less_than_or_equal_to: 340
    // \endrules
    //
    optional double temperature = 4;

    // Relative humidity in at z=0.0 in world frame.
    //
    // Note that physically more relevant measures, like absolute or specific
    // humidity can be easily derived from relative_humidity, given that the
    // temperature and atmospheric_pressure are known.
    //
    // Unit: %
    //
    // \rules
    // is_greater_than_or_equal_to: 0
    // is_less_than_or_equal_to: 100
    // \endrules
    //
    optional double relative_humidity = 5;

    // Description of the precipitation.
    //
    repeated Precipitation precipitation = 6;

    // Definition of fog.
    // (V = Visibility in m)
    //
    // Visibility is defined as the length of the atmosphere over which a beam
    // of light travels before its luminous flux is reduced to 5% of its
    // original value (definition used by the Meteorological Office [1]).
    // This is approximately equivalent to visibility measured in terms of the
    // contrast of a distant object against its background.
    //
    // \par References:
    // [1] Meteorological Office UK. (2020). <em>Homepage of the Meteorological Office - How we measure visibility</em>. Retrieved January 25, 2020, from http://www.metoffice.gov.uk/guide/weather/observations-guide/how-we-measure-visibility
    //
    optional double fog = 7;

    // The Unix epoch (or Unix time or POSIX time or Unix timestamp) is
    // the number of seconds that have elapsed since January 1, 1970
    // (midnight UTC/GMT [1]), not counting leap seconds [2].
    // Historically, the origin of UNIX system time was referred to as
    // "00:00:00 GMT, January 1, 1970" [2]. Literally speaking the epoch
    // is Unix time 0 (midnight 1/1/1970), but 'epoch' is often used as
    // a synonym for 'Unix time'. Many Unix systems store epoch dates as
    // a signed 32-bit integer, which might cause problems on January 19,
    // 2038 (known as the Year 2038 problem or Y2038).
    //
    // \note You can convert the timestamp using the following [routines
    // sorted by languages](https://www.epochconverter.com/#code).
    //
    // \par References:
    // [1] ITU Radiocommunication Assembly. (2002). <em>Recommondation  ITU-R  TF.460-6 Standard-frequency and time-signal emissions</em>. (Rec.  ITU-R  TF.460-6). Retrieved January 25, 2020, from http://www.itu.int/dms_pubrec/itu-r/rec/tf/R-REC-TF.460-6-200202-I!!PDF-E.pdf \n
    // [2] The Open Group. (2018). <em>POSIX.1-2017</em> The Open Group Base Specifications Issue 7, 2018 edition. IEEE Std 1003.1-2017 (Revision of IEEE Std 1003.1-2008). Retrieved January 25, 2020, from https://pubs.opengroup.org/onlinepubs/9699919799/xrat/contents.html
    //
    optional int64 unix_timestamp = 8;

    // Optional external reference to the environmental condition sources.
    //
    // \note For OpenDRIVE and OpenSECNARIO there is no direct counterpart.
    //
    // \note For non-ASAM standards, it is implementation-specific how
    //       source_reference is resolved.
    //
    // \note The value has to be repeated because one object may be derived
    //       from more than one origin source, for example, from a scenario file
    //       and from sensors.
    //
    repeated ExternalReference source_reference = 9;

    // \brief Definition of cloud states.
    //
    // \note Defines the cloud states according to OpenScenario 1.1
    //
    optional CloudState cloud_state = 10;

    // \brief Definition of the wind speed and direction.
    //
    optional Wind wind = 11;

    // \brief Definition of fog mist with a given location with a bounding box
    //
    // \note There can be several of fog mist fields
    //
    repeated FogMist fog_mist = 12;

    //
    // \brief The time of day at a specified location.
    //
    // \note In general the global position of the parent frame should be
    // obtainable in order to derive the local time.
    // This information can be calculated from the \c #unix_timestamp in
    // combination with \c #osi3::GroundTruth::proj_string and the position of
    // the corresponding \c #osi3::BaseStationary or \c #osi3::BaseMoving .
    //
    message TimeOfDay
    {
        // The number of seconds in s that have passed since midnight local time.
        // Used e.g. for determining the current state of the circadian rhythm
        // of a driver.
        //
        // \note No changes of daylight saving time or time zones are
        // considered.
        //
        // \rules
        // is_greater_than_or_equal_to: 0
        // is_less_than: 86400
        // \endrules
        //
        optional uint32 seconds_since_midnight = 1;
    }

    //
    // \brief Defines wind properties.
    //
    // \note Describes the wind speed and direction from OpenScenario 1.1
    //
    message Wind
    {
        // The target direction of the wind (not the origin direction) in the ground/xy-plane of the \c
        // world coordinate system. Corresponds to the heading/yaw angle. \c
        // x-axis-direction is 0 rad. Unit [rad]. Range [0...2 pi[
        //
        optional Vector3d direction = 1;

        // The wind speed. Unit [m/s]. Range [0...inf[
        //
        optional double speed = 2;
    }

    //
    // \brief Mist is defined as 'when there is such obscurity and the associated visibility is equal to or exceeds 1000 m.'
    // Like fog, mist is still the result of the suspension of water droplets, but simply at a lower density. [1]
    //
    // \note Mist typically is quicker to dissipate and can rapidly disappear with even slight winds,
    // it's also what you see when you can see your breath on a cold day. Mist is commonly confused with fog,
    // which resembles a stratus cloud lying at ground level. These two phenomena differ, but share some commonalities;
    // similar processes form both fog and mist. Fog is denser and generally lasts longer, while mist is thinner and more transparent. [2]
    //
    // The definition of mist as being composed of an aggregate of microscopic and hygroscopic water droplets,
    // and that mist is intermediate between haze and fog infers a distinction between haze and fog based
    // on the definition of their particle size [3]
    //
    // \par References:
    // [1] https://www.metoffice.gov.uk/weather/learn-about/weather/types-of-weather/fog/difference-mist-and-fog
    // [2] https://en.wikipedia.org/wiki/Mist
    // [3] Ralph G. Eldridge (1969). mist â€” the transition from haze to fog. <em>The MITRE Corporation, Bedford, Mass.</em> Vol 50, No. 6. pp. 422. https://doi.org/10.1175/1520-0477-50.6.422
    //
    message FogMist
    {
        // Defines the possible visible range \c Unit: m; Range: [0..inf[.
        //
        optional double visibility = 1;

        // Dimensions and center of fog in fixed world coordinates.
        //
        optional BaseStationary bounding_box = 2;
    }

    //
    // \brief Specification of sun properties.
    //
    // \note Defines the specification of the \c sun properties according to OpenScenario 1.1
    //
    message SunPosition
    {
        // Azimuth of the sun, counted counterclockwise, 0=north, PI/2 = east, PI=south, 3/2 PI=west. Unit: rad; Range: [0..2PI].
        //
        optional double azimuth = 1;

        // Solar elevation angle, 0=x/y plane, PI/2=zenith. Unit: rad; Range: [-PI..PI].
        //
        optional double elevation = 2;

        // TODO: ambient_illumination? -> Solar irradiance: https://en.wikipedia.org/wiki/Solar_irradiance
        // Illuminance of the sun, direct sunlight is around 100,00 lx. Unit: lux; Range: [0..inf[.
        //
        optional double solar_intensity = 3;
    }

    //
    // Description of the precipitation with intensity and the type
    // (I = Intensity of precipitation in mm per hour mm/h)
    //
    // \par Reference:
    // [1] Paulat, M., Frei, C., Hagen, M. & Wernli, H. (2008). A gridded dataset of hourly precipitation in Germany: Its construction, climatology and application. <em>Meteorologische Zeitschrift</em>. Vol. 17, No. 6. pp. 719-732. Berlin, Stuttgart, Germany. https://doi.org/10.1127/0941-2948/2008/0332
    //
    // TODO: Distribution Marschall-Palmer, Ulbricht - SNOW? - tbd
    // TODO: Bounding Box! - tbd
    message Precipitation
    {
        // The intensity of the precipitation (valid for all precipitation types). Unit [mm/h]. Range [0...inf[
        // According to OpenScenario 1.1 and according to the context of ISO 2315
        //
        optional double intensity = 1;

        // Type of the precipitation.
        //
        optional PrecipitationType type = 2;
    }

    // Defines a precipitation by type and value of the weather.
    //
    enum PrecipitationType
    {
        // Intensity of precipitation is unknown (must not be used in ground
        // truth).
        //
        PRECIPITATION_TYPE_UNKNOWN = 0;

        // Other (unspecified but known) intensity of precipitation.
        //
        PRECIPITATION_TYPE_OTHER = 1;

        // No precipitation.
        //
        PRECIPITATION_TYPE_DRY = 2;

        // Rain.
        //
        PRECIPITATION_TYPE_RAIN = 3;

        // Hail.
        //
        PRECIPITATION_TYPE_HAIL = 4;

        // Snow.
        //
        PRECIPITATION_TYPE_SNOW = 5;

        // Sleet/Graupel.
        //
        PRECIPITATION_TYPE_SLEET = 6;
    }

    // Definition of the cloud state, i.e. cloud state and sky visualization settings.
    //
    // \par References:
    // [1] ISO 15469:2004(E) / CIE S 011/E:2003 : Spatial distribution of skylight 
    // [2] https://de.wikipedia.org/wiki/BewÃ¶lkung
    //
    // The total degree of coverage indicates how large the part of the sky vault is which is covered
    // with clouds altogether. It is given in eighths, because this division is easier to estimate
    // for the observer. 0 eighths means that there are no traces of clouds in the sky,
    // 4 eighths means that the sky is covered with clouds up to half, 8 eighths means that the sky is
    // completely covered with clouds and no sky blue can be recognized.
    //
    // For cloud determination, the observer will choose a location from which he can overlook the entire sky.
    // When determining the total cloud cover, all clouds or parts of clouds, regardless of height and genus,
    // that are above his location will be added. Aircraft contrails are also counted as cloud cover if they remain
    // in the sky for more than 15 minutes. On the other hand, fog is not counted as cloud cover.
    //
    // With a little practice, the observer can easily determine the total amount of cloud cover.
    // Problems occur only with scattered clouds or many single clouds (cumulus).
    // Their cloud cover is often overestimated. On the other hand,
    // the coverage of thin ice clouds (cirrus) is often underestimated.
    //
    enum CloudState
    {
        // TODO: Check with Sensor Group
        // TODO: https://de.wikipedia.org/wiki/Bew%C3%B6lkung

        // Cloud State is unknown (must not be used in ground truth).
        //
        CLOUD_STATE_UNKNOWN = 0;

        // Other (unspecified but known) CloudState.
        //
        CLOUD_STATE_OTHER = 1;

        // Cloudless (0/8)
        //
        CLOUD_STATE_CLOUDLESS = 2;

        // Sunny (1/8)
        //
        CLOUD_STATE_SUNNY = 3;

        // Serene (2/8))
        //
        CLOUD_STATE_SERENE = 4;

        // Slightly Cloudy (3/8) 
        //
        CLOUD_STATE_SLIGHTLYCLOUDY = 5;

        // Light Cloudy (4/8)
        //
        CLOUD_STATE_LIGHTCLOUDY = 6;
        
        // Cloudy (5/8)
        //
        CLOUD_STATE_CLOUDY = 7;
        
        // Heavy Cloudy (6/8)
        //
        CLOUD_STATE_HEAVYCLOUDY = 8;
        
        // Almost Covered (7/8)
        //
        CLOUD_STATE_ALMOSTCOVERED = 9;
        
        // Covered (8/8)
        //
        CLOUD_STATE_COVERED = 10;
        
        // No Sky (9/8)
        //
        CLOUD_STATE_NOSKY = 11;
    }
}
